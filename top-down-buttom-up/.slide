# Top-Down vs Bottom-Up
Different ways of approaching a problem.
27 Apr 2022
Tags: go, software architecture, design
Summary: What are the Top-Down and Bottom-Up approaches?

Tobias Theel | Nerzal
Lead Developer at ClariLab
tobias.theel@noobygames.de
https://noobygames.des
@Nooby_Games

## Agenda

- Top-Down
- Bottom-Up

## Top-Down

Your PO jumps into the Pit and brings a wild UserStory.

> As a User i demand to be able to provide feedback using a feedback window.

On the User story, there is a small post-it from your Software Architect

> Deploy that shit in it's own service

<br>
<br>

**So what do you do now?**

## Creating Tasks

Now you sit in your Sprint planning and need to create Tasks for that User Story.

.image assets/user-story-tasks.png _ 800
.caption Screenshot from Azure DevOps Sprint Board

## What happened?

As a developer you have naturally splitted a bigger problem into several smaller problems.

1. Deploy a new Service
1. Provide an API
1. Notify Customer Success

## Splitting problems

You have successfully created 3 problems out of a single problem!

Congratulations! You are now a developer.

.image assets/top-down-01.png
.caption Problem divided into 3 sub problems

<br>

**But what are we going to do now?**

## We create more problems

.image assets/top-down-02.png _ 500
.caption Sub problem divided into even more sub problems

**But what are we going to do now?**

## We create more problems

.image assets/top-down-03.png _ 300
.caption Sub problem divided into even more sub problems

**But what are we going to do now?**

## Top-Down approach

We continue the process shown in the previous slides, until we reach units, that cannot be broken down into more problems anymore.

If your Task is to build a new Car, you don't start with designing a Screw, that might be needed to be put somewhere in the motor.
You might start at a more abstract top level approach.

You ask question like:

- How many doors should it have?
- How long should it be?
- What type of motor should it get?

## Top-Down Summary

- Start with an abstract problem
- Divide that big problem into several smaller and less abstract problems
- Repeat the division until it makes no sense anymore to divide the issues further
- Typical approach in lots of tasks (even not dev related)

## When to use?

When you have clear requirements and exactly know, what comes in, what goes out and how does the environment look like.

## Bottom-Up

Your PO jumps into the Pit and brings a wild UserStory.

> As a User i demand to be able to order that new different product in your web shop.

On the User story, there is a small post-it from your Software Architect

> FML, i have no idea how that new data provider shit looks like or works. gl hf. surrender at 20 gg wp!

<br>
<br>

**So what do you do now?**

## Sprint Planning

You are pretty upset, cause you have no information how the data you need to handle is going to look like and the architect the PO also has no vision of the outcome. So you start creating tasks.

.image assets/bottom-up-01.png _ 250
.caption Starting with low level tickets, that describe a part of the functionality

## What have u done?

You have created a bunch of tickets, that describe lots of smaller problems.

All of them should talk to a foreign API, with an unfamiliar specification.

- Search
- Get available products
- Order product
- Create Invoice
- Check Payment Status
- Fetch prices

**But what are we going to do now?**

## Implement the foreign API endpoints

We start by creating functions, that talk to the foreign API.

The lowest or most inner layers of your application are typically the database layer and the layers that directly talk to third parties.

.image assets/bottom-up-02.png
.caption Implement the lowest layer of your application first.

## Find common groups / abstractions

We start by creating functions, that talk to the foreign API.
As we do now know, what the foreign API expects as inputs and what comes out of that API, we can start to create some abstractions.

.image assets/bottom-up-03.png
.caption Find common functionality, group by business cases

## Repeat the process

We repeat the process of finding common groups and abstractions until we have reached the highest layer of our application.
The highest layer of our example application is the REST handler, which handles REST-API requests and then calls the business layer.

.image assets/bottom-up-04.png _ 600
.caption Repeat until we have reached the top layer

## Summary Bottom-Up

- Starting at the smallest / lowest bits
- Find common groups and abstractions
- Repeat until at highest level

Can be helpful, when:

- the environment is foreign
- requirements are bad
- you have a hard time finding top level abstractions
